;;! target = "x86_64"
;;! test = "compile"
;;! flags = " -C cranelift-enable-heap-access-spectre-mitigation -O static-memory-maximum-size=0 -O static-memory-guard-size=0 -O dynamic-memory-guard-size=0"

;; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
;; !!! GENERATED BY 'make-load-store-tests.sh' DO NOT EDIT !!!
;; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

(module
  (memory i32 1)

  (func (export "do_store") (param i32 i32)
    local.get 0
    local.get 1
    i32.store offset=0xffff0000)

  (func (export "do_load") (param i32) (result i32)
    local.get 0
    i32.load offset=0xffff0000))

;; function u0:0:
;;   pushq   %rbp
;;   unwind PushFrameRegs { offset_upward_to_caller_sp: 16 }
;;   movq    %rsp, %rbp
;;   movq    8(%rdi), %r10
;;   movq    0(%r10), %r10
;;   cmpq    %rsp, %r10
;;   jnbe #trap=stk_ovf
;;   unwind DefineNewFrame { offset_upward_to_caller_sp: 16, offset_downward_to_clobbers: 0 }
;; block0:
;;   movl    %edx, %r11d
;;   movq    %r11, %rdx
;;   addq    %rdx, const(0), %rdx
;;   jb #trap=heap_oob
;;   movq    88(%rdi), %r9
;;   xorq    %r8, %r8, %r8
;;   addq    %r11, 80(%rdi), %r11
;;   movl    $-65536, %r10d
;;   lea     0(%r11,%r10,1), %r10
;;   cmpq    %r9, %rdx
;;   cmovnbeq %r8, %r10, %r10
;;   movl    %ecx, 0(%r10)
;;   jmp     label1
;; block1:
;;   movq    %rbp, %rsp
;;   popq    %rbp
;;   ret
;;
;; function u0:1:
;;   pushq   %rbp
;;   unwind PushFrameRegs { offset_upward_to_caller_sp: 16 }
;;   movq    %rsp, %rbp
;;   movq    8(%rdi), %r10
;;   movq    0(%r10), %r10
;;   cmpq    %rsp, %r10
;;   jnbe #trap=stk_ovf
;;   unwind DefineNewFrame { offset_upward_to_caller_sp: 16, offset_downward_to_clobbers: 0 }
;; block0:
;;   movl    %edx, %r11d
;;   movq    %r11, %rcx
;;   addq    %rcx, const(0), %rcx
;;   jb #trap=heap_oob
;;   movq    88(%rdi), %r8
;;   xorq    %rdx, %rdx, %rdx
;;   addq    %r11, 80(%rdi), %r11
;;   movl    $-65536, %r9d
;;   lea     0(%r11,%r9,1), %r9
;;   cmpq    %r8, %rcx
;;   cmovnbeq %rdx, %r9, %r9
;;   movl    0(%r9), %eax
;;   jmp     label1
;; block1:
;;   movq    %rbp, %rsp
;;   popq    %rbp
;;   ret
