test compile precise-output
target x86_64

;; Test the `tail` calling convention with non-tail calls and stack arguments.

function %tail_callee_stack_args(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64 tail {
block0(v0: i64, v1: i64, v2: i64, v3: i64, v4: i64, v5: i64, v6: i64, v7: i64, v8: i64, v9: i64, v10: i64, v11: i64, v12: i64, v13: i64, v14: i64):
    return v14
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movq    16(%rbp), %r10
;   movq    24(%rbp), %rsi
;   movq    32(%rbp), %rax
;   movq    40(%rbp), %rdx
;   movq    48(%rbp), %r9
;   movq    56(%rbp), %r11
;   movq    64(%rbp), %rdi
;   movq    72(%rbp), %rcx
;   movq    80(%rbp), %rax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret 80
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movq 0x10(%rbp), %r10
;   movq 0x18(%rbp), %rsi
;   movq 0x20(%rbp), %rax
;   movq 0x28(%rbp), %rdx
;   movq 0x30(%rbp), %r9
;   movq 0x38(%rbp), %r11
;   movq 0x40(%rbp), %rdi
;   movq 0x48(%rbp), %rcx
;   movq 0x50(%rbp), %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq $0x50

function %tail_caller_stack_args() -> i64 {
    fn0 = %tail_callee_stack_args(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64 tail

block0:
    v0 = iconst.i64 10
    v1 = iconst.i64 15
    v2 = iconst.i64 20
    v3 = iconst.i64 25
    v4 = iconst.i64 30
    v5 = iconst.i64 35
    v6 = iconst.i64 40
    v7 = iconst.i64 45
    v8 = iconst.i64 50
    v9 = iconst.i64 55
    v10 = iconst.i64 60
    v11 = iconst.i64 65
    v12 = iconst.i64 70
    v13 = iconst.i64 75
    v14 = iconst.i64 80
    v15 = call fn0(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14)
    return v15
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
;   subq    %rsp, $64, %rsp
;   movq    %rbx, 16(%rsp)
;   movq    %r12, 24(%rsp)
;   movq    %r13, 32(%rsp)
;   movq    %r14, 40(%rsp)
;   movq    %r15, 48(%rsp)
; block0:
;   movl    $10, %edi
;   movq    %rdi, rsp(0 + virtual offset)
;   movl    $15, %esi
;   movl    $20, %edx
;   movl    $25, %ecx
;   movl    $30, %r8d
;   movl    $35, %r9d
;   movl    $40, %r10d
;   movl    $45, %r11d
;   movl    $50, %eax
;   movl    $55, %r12d
;   movl    $60, %r13d
;   movl    $65, %r14d
;   movl    $70, %r15d
;   movl    $75, %ebx
;   movl    $80, %edi
;   subq    %rsp, $80, %rsp
;   virtual_sp_offset_adjust 80
;   movq    %r10, 0(%rsp)
;   movq    %r11, 8(%rsp)
;   movq    %rax, 16(%rsp)
;   movq    %r12, 24(%rsp)
;   movq    %r13, 32(%rsp)
;   movq    %r14, 40(%rsp)
;   movq    %r15, 48(%rsp)
;   movq    %rbx, 56(%rsp)
;   movq    %rdi, 64(%rsp)
;   load_ext_name %tail_callee_stack_args+0, %rax
;   movq    rsp(0 + virtual offset), %rdi
;   call    *%rax
;   movq    16(%rsp), %rbx
;   movq    24(%rsp), %r12
;   movq    32(%rsp), %r13
;   movq    40(%rsp), %r14
;   movq    48(%rsp), %r15
;   addq    %rsp, $64, %rsp
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
;   subq $0x40, %rsp
;   movq %rbx, 0x10(%rsp)
;   movq %r12, 0x18(%rsp)
;   movq %r13, 0x20(%rsp)
;   movq %r14, 0x28(%rsp)
;   movq %r15, 0x30(%rsp)
; block1: ; offset 0x21
;   movl $0xa, %edi
;   movq %rdi, (%rsp)
;   movl $0xf, %esi
;   movl $0x14, %edx
;   movl $0x19, %ecx
;   movl $0x1e, %r8d
;   movl $0x23, %r9d
;   movl $0x28, %r10d
;   movl $0x2d, %r11d
;   movl $0x32, %eax
;   movl $0x37, %r12d
;   movl $0x3c, %r13d
;   movl $0x41, %r14d
;   movl $0x46, %r15d
;   movl $0x4b, %ebx
;   movl $0x50, %edi
;   subq $0x50, %rsp
;   movq %r10, (%rsp)
;   movq %r11, 8(%rsp)
;   movq %rax, 0x10(%rsp)
;   movq %r12, 0x18(%rsp)
;   movq %r13, 0x20(%rsp)
;   movq %r14, 0x28(%rsp)
;   movq %r15, 0x30(%rsp)
;   movq %rbx, 0x38(%rsp)
;   movq %rdi, 0x40(%rsp)
;   movabsq $0, %rax ; reloc_external Abs8 %tail_callee_stack_args 0
;   movq 0x50(%rsp), %rdi
;   callq *%rax
;   movq 0x10(%rsp), %rbx
;   movq 0x18(%rsp), %r12
;   movq 0x20(%rsp), %r13
;   movq 0x28(%rsp), %r14
;   movq 0x30(%rsp), %r15
;   addq $0x40, %rsp
;   movq %rbp, %rsp
;   popq %rbp
;   retq

;; Test the `tail` calling convention with non-tail calls and stack returns.

function %tail_callee_stack_rets() -> i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 tail {
block0:
    v0 = iconst.i64 10
    v1 = iconst.i64 15
    v2 = iconst.i64 20
    v3 = iconst.i64 25
    v4 = iconst.i64 30
    v5 = iconst.i64 35
    v6 = iconst.i64 40
    v7 = iconst.i64 45
    v8 = iconst.i64 50
    v9 = iconst.i64 55
    v10 = iconst.i64 60
    v11 = iconst.i64 65
    v12 = iconst.i64 70
    v13 = iconst.i64 75
    v14 = iconst.i64 80
    v15 = iconst.i64 85
    v16 = iconst.i64 90
    v17 = iconst.i64 95
    v18 = iconst.i64 100
    v19 = iconst.i64 105
    v20 = iconst.i64 110
    v21 = iconst.i64 115
    v22 = iconst.i64 120
    v23 = iconst.i64 125
    v24 = iconst.i64 130
    v25 = iconst.i64 135
    return v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
;   subq    %rsp, $160, %rsp
;   movq    %rbx, 112(%rsp)
;   movq    %r12, 120(%rsp)
;   movq    %r13, 128(%rsp)
;   movq    %r14, 136(%rsp)
;   movq    %r15, 144(%rsp)
; block0:
;   movl    $10, %eax
;   movq    %rax, rsp(104 + virtual offset)
;   movl    $15, %ecx
;   movq    %rcx, rsp(96 + virtual offset)
;   movl    $20, %edx
;   movq    %rdx, rsp(88 + virtual offset)
;   movl    $25, %esi
;   movq    %rsi, rsp(80 + virtual offset)
;   movl    $30, %esi
;   movq    %rsi, rsp(72 + virtual offset)
;   movl    $35, %r8d
;   movq    %r8, rsp(64 + virtual offset)
;   movl    $40, %r9d
;   movq    %r9, rsp(56 + virtual offset)
;   movl    $45, %r10d
;   movq    %r10, rsp(48 + virtual offset)
;   movl    $50, %r11d
;   movq    %r11, rsp(40 + virtual offset)
;   movl    $55, %r13d
;   movl    $60, %r14d
;   movl    $65, %r15d
;   movl    $70, %ebx
;   movl    $75, %r12d
;   movl    $80, %eax
;   movl    $85, %ecx
;   movl    $90, %edx
;   movl    $95, %esi
;   movq    %rsi, rsp(32 + virtual offset)
;   movl    $100, %r8d
;   movl    $105, %r9d
;   movl    $110, %r10d
;   movl    $115, %r11d
;   movl    $120, %esi
;   movq    %rsi, rsp(24 + virtual offset)
;   movl    $125, %esi
;   movq    %rsi, rsp(16 + virtual offset)
;   movl    $130, %esi
;   movq    %rsi, rsp(8 + virtual offset)
;   movl    $135, %esi
;   movq    %rsi, rsp(0 + virtual offset)
;   movq    %r13, 0(%rdi)
;   movq    %r14, 8(%rdi)
;   movq    %r15, 16(%rdi)
;   movq    %rbx, 24(%rdi)
;   movq    %r12, 32(%rdi)
;   movq    %rax, 40(%rdi)
;   movq    %rcx, 48(%rdi)
;   movq    %rdx, 56(%rdi)
;   movq    rsp(32 + virtual offset), %rax
;   movq    %rax, 64(%rdi)
;   movq    %r8, 72(%rdi)
;   movq    %r9, 80(%rdi)
;   movq    %r10, 88(%rdi)
;   movq    %r11, 96(%rdi)
;   movq    rsp(24 + virtual offset), %rsi
;   movq    %rsi, 104(%rdi)
;   movq    rsp(16 + virtual offset), %rsi
;   movq    %rsi, 112(%rdi)
;   movq    rsp(8 + virtual offset), %rsi
;   movq    %rsi, 120(%rdi)
;   movq    rsp(0 + virtual offset), %rsi
;   movq    %rsi, 128(%rdi)
;   movq    rsp(104 + virtual offset), %rax
;   movq    rsp(96 + virtual offset), %rcx
;   movq    rsp(88 + virtual offset), %rdx
;   movq    rsp(80 + virtual offset), %rsi
;   movq    rsp(72 + virtual offset), %rdi
;   movq    rsp(64 + virtual offset), %r8
;   movq    rsp(56 + virtual offset), %r9
;   movq    rsp(48 + virtual offset), %r10
;   movq    rsp(40 + virtual offset), %r11
;   movq    112(%rsp), %rbx
;   movq    120(%rsp), %r12
;   movq    128(%rsp), %r13
;   movq    136(%rsp), %r14
;   movq    144(%rsp), %r15
;   addq    %rsp, $160, %rsp
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
;   subq $0xa0, %rsp
;   movq %rbx, 0x70(%rsp)
;   movq %r12, 0x78(%rsp)
;   movq %r13, 0x80(%rsp)
;   movq %r14, 0x88(%rsp)
;   movq %r15, 0x90(%rsp)
; block1: ; offset 0x2d
;   movl $0xa, %eax
;   movq %rax, 0x68(%rsp)
;   movl $0xf, %ecx
;   movq %rcx, 0x60(%rsp)
;   movl $0x14, %edx
;   movq %rdx, 0x58(%rsp)
;   movl $0x19, %esi
;   movq %rsi, 0x50(%rsp)
;   movl $0x1e, %esi
;   movq %rsi, 0x48(%rsp)
;   movl $0x23, %r8d
;   movq %r8, 0x40(%rsp)
;   movl $0x28, %r9d
;   movq %r9, 0x38(%rsp)
;   movl $0x2d, %r10d
;   movq %r10, 0x30(%rsp)
;   movl $0x32, %r11d
;   movq %r11, 0x28(%rsp)
;   movl $0x37, %r13d
;   movl $0x3c, %r14d
;   movl $0x41, %r15d
;   movl $0x46, %ebx
;   movl $0x4b, %r12d
;   movl $0x50, %eax
;   movl $0x55, %ecx
;   movl $0x5a, %edx
;   movl $0x5f, %esi
;   movq %rsi, 0x20(%rsp)
;   movl $0x64, %r8d
;   movl $0x69, %r9d
;   movl $0x6e, %r10d
;   movl $0x73, %r11d
;   movl $0x78, %esi
;   movq %rsi, 0x18(%rsp)
;   movl $0x7d, %esi
;   movq %rsi, 0x10(%rsp)
;   movl $0x82, %esi
;   movq %rsi, 8(%rsp)
;   movl $0x87, %esi
;   movq %rsi, (%rsp)
;   movq %r13, (%rdi)
;   movq %r14, 8(%rdi)
;   movq %r15, 0x10(%rdi)
;   movq %rbx, 0x18(%rdi)
;   movq %r12, 0x20(%rdi)
;   movq %rax, 0x28(%rdi)
;   movq %rcx, 0x30(%rdi)
;   movq %rdx, 0x38(%rdi)
;   movq 0x20(%rsp), %rax
;   movq %rax, 0x40(%rdi)
;   movq %r8, 0x48(%rdi)
;   movq %r9, 0x50(%rdi)
;   movq %r10, 0x58(%rdi)
;   movq %r11, 0x60(%rdi)
;   movq 0x18(%rsp), %rsi
;   movq %rsi, 0x68(%rdi)
;   movq 0x10(%rsp), %rsi
;   movq %rsi, 0x70(%rdi)
;   movq 8(%rsp), %rsi
;   movq %rsi, 0x78(%rdi)
;   movq (%rsp), %rsi
;   movq %rsi, 0x80(%rdi)
;   movq 0x68(%rsp), %rax
;   movq 0x60(%rsp), %rcx
;   movq 0x58(%rsp), %rdx
;   movq 0x50(%rsp), %rsi
;   movq 0x48(%rsp), %rdi
;   movq 0x40(%rsp), %r8
;   movq 0x38(%rsp), %r9
;   movq 0x30(%rsp), %r10
;   movq 0x28(%rsp), %r11
;   movq 0x70(%rsp), %rbx
;   movq 0x78(%rsp), %r12
;   movq 0x80(%rsp), %r13
;   movq 0x88(%rsp), %r14
;   movq 0x90(%rsp), %r15
;   addq $0xa0, %rsp
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %tail_caller_stack_rets() -> i64 tail {
    fn0 = colocated %tail_callee_stack_rets() -> i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 tail

block0:
    v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25 = call fn0()
    return v25
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   subq    %rsp, $144, %rsp
;   virtual_sp_offset_adjust 144
;   lea     0(%rsp), %rdi
;   call    TestCase(%tail_callee_stack_rets)
;   movq    0(%rsp), %rdx
;   movq    8(%rsp), %r9
;   movq    16(%rsp), %r11
;   movq    24(%rsp), %rdi
;   movq    32(%rsp), %rcx
;   movq    40(%rsp), %r8
;   movq    48(%rsp), %r10
;   movq    56(%rsp), %rsi
;   movq    64(%rsp), %rax
;   movq    72(%rsp), %rdx
;   movq    80(%rsp), %r9
;   movq    88(%rsp), %r11
;   movq    96(%rsp), %rdi
;   movq    104(%rsp), %rcx
;   movq    112(%rsp), %r8
;   movq    120(%rsp), %r10
;   movq    128(%rsp), %rax
;   addq    %rsp, $144, %rsp
;   virtual_sp_offset_adjust -144
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   subq $0x90, %rsp
;   leaq (%rsp), %rdi
;   callq 0x14 ; reloc_external CallPCRel4 %tail_callee_stack_rets -4
;   movq (%rsp), %rdx
;   movq 8(%rsp), %r9
;   movq 0x10(%rsp), %r11
;   movq 0x18(%rsp), %rdi
;   movq 0x20(%rsp), %rcx
;   movq 0x28(%rsp), %r8
;   movq 0x30(%rsp), %r10
;   movq 0x38(%rsp), %rsi
;   movq 0x40(%rsp), %rax
;   movq 0x48(%rsp), %rdx
;   movq 0x50(%rsp), %r9
;   movq 0x58(%rsp), %r11
;   movq 0x60(%rsp), %rdi
;   movq 0x68(%rsp), %rcx
;   movq 0x70(%rsp), %r8
;   movq 0x78(%rsp), %r10
;   movq 0x80(%rsp), %rax
;   addq $0x90, %rsp
;   movq %rbp, %rsp
;   popq %rbp
;   retq

;; Test the `tail` calling convention with non-tail calls and both stack
;; arguments and stack returns.

function %tail_callee_stack_args_and_rets(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 tail {
block0(v0: i64, v1: i64, v2: i64, v3: i64, v4: i64, v5: i64, v6: i64, v7: i64, v8: i64, v9: i64, v10: i64, v11: i64, v12: i64, v13: i64, v14: i64, v15: i64, v16: i64, v17: i64, v18: i64, v19: i64, v20: i64, v21: i64, v22: i64, v23: i64, v24: i64, v25: i64):
    return v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
;   subq    %rsp, $160, %rsp
;   movq    %rbx, 112(%rsp)
;   movq    %r12, 120(%rsp)
;   movq    %r13, 128(%rsp)
;   movq    %r14, 136(%rsp)
;   movq    %r15, 144(%rsp)
; block0:
;   movq    %rdi, rsp(0 + virtual offset)
;   movq    %rsi, rsp(8 + virtual offset)
;   movq    %rdx, rsp(16 + virtual offset)
;   movq    %rcx, rsp(24 + virtual offset)
;   movq    %r8, rsp(32 + virtual offset)
;   movq    %r9, rsp(40 + virtual offset)
;   movq    16(%rbp), %r9
;   movq    %r9, rsp(48 + virtual offset)
;   movq    24(%rbp), %r10
;   movq    %r10, rsp(56 + virtual offset)
;   movq    32(%rbp), %r11
;   movq    %r11, rsp(64 + virtual offset)
;   movq    40(%rbp), %rdx
;   movq    48(%rbp), %r9
;   movq    %r9, rsp(72 + virtual offset)
;   movq    56(%rbp), %r11
;   movq    %r11, rsp(80 + virtual offset)
;   movq    64(%rbp), %r11
;   movq    72(%rbp), %r10
;   movq    80(%rbp), %r9
;   movq    88(%rbp), %rsi
;   movq    %rsi, rsp(88 + virtual offset)
;   movq    96(%rbp), %r13
;   movq    104(%rbp), %r15
;   movq    112(%rbp), %r12
;   movq    120(%rbp), %r14
;   movq    128(%rbp), %rbx
;   movq    136(%rbp), %rdi
;   movq    %rdi, rsp(96 + virtual offset)
;   movq    144(%rbp), %rcx
;   movq    152(%rbp), %r8
;   movq    160(%rbp), %rdi
;   movq    168(%rbp), %rsi
;   movq    176(%rbp), %rax
;   movq    %rdx, 0(%rax)
;   movq    rsp(72 + virtual offset), %rdx
;   movq    %rdx, 8(%rax)
;   movq    rsp(80 + virtual offset), %rdx
;   movq    %rdx, 16(%rax)
;   movq    %r11, 24(%rax)
;   movq    %r10, 32(%rax)
;   movq    %r9, 40(%rax)
;   movq    rsp(88 + virtual offset), %r10
;   movq    %r10, 48(%rax)
;   movq    %r13, 56(%rax)
;   movq    %r15, 64(%rax)
;   movq    %r12, 72(%rax)
;   movq    %r14, 80(%rax)
;   movq    %rbx, 88(%rax)
;   movq    rsp(96 + virtual offset), %rdx
;   movq    %rdx, 96(%rax)
;   movq    %rcx, 104(%rax)
;   movq    %r8, 112(%rax)
;   movq    %rdi, 120(%rax)
;   movq    %rsi, 128(%rax)
;   movq    rsp(0 + virtual offset), %rax
;   movq    rsp(8 + virtual offset), %rcx
;   movq    rsp(16 + virtual offset), %rdx
;   movq    rsp(24 + virtual offset), %rsi
;   movq    rsp(32 + virtual offset), %rdi
;   movq    rsp(40 + virtual offset), %r8
;   movq    rsp(48 + virtual offset), %r9
;   movq    rsp(56 + virtual offset), %r10
;   movq    rsp(64 + virtual offset), %r11
;   movq    112(%rsp), %rbx
;   movq    120(%rsp), %r12
;   movq    128(%rsp), %r13
;   movq    136(%rsp), %r14
;   movq    144(%rsp), %r15
;   addq    %rsp, $160, %rsp
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret 176
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
;   subq $0xa0, %rsp
;   movq %rbx, 0x70(%rsp)
;   movq %r12, 0x78(%rsp)
;   movq %r13, 0x80(%rsp)
;   movq %r14, 0x88(%rsp)
;   movq %r15, 0x90(%rsp)
; block1: ; offset 0x2d
;   movq %rdi, (%rsp)
;   movq %rsi, 8(%rsp)
;   movq %rdx, 0x10(%rsp)
;   movq %rcx, 0x18(%rsp)
;   movq %r8, 0x20(%rsp)
;   movq %r9, 0x28(%rsp)
;   movq 0x10(%rbp), %r9
;   movq %r9, 0x30(%rsp)
;   movq 0x18(%rbp), %r10
;   movq %r10, 0x38(%rsp)
;   movq 0x20(%rbp), %r11
;   movq %r11, 0x40(%rsp)
;   movq 0x28(%rbp), %rdx
;   movq 0x30(%rbp), %r9
;   movq %r9, 0x48(%rsp)
;   movq 0x38(%rbp), %r11
;   movq %r11, 0x50(%rsp)
;   movq 0x40(%rbp), %r11
;   movq 0x48(%rbp), %r10
;   movq 0x50(%rbp), %r9
;   movq 0x58(%rbp), %rsi
;   movq %rsi, 0x58(%rsp)
;   movq 0x60(%rbp), %r13
;   movq 0x68(%rbp), %r15
;   movq 0x70(%rbp), %r12
;   movq 0x78(%rbp), %r14
;   movq 0x80(%rbp), %rbx
;   movq 0x88(%rbp), %rdi
;   movq %rdi, 0x60(%rsp)
;   movq 0x90(%rbp), %rcx
;   movq 0x98(%rbp), %r8
;   movq 0xa0(%rbp), %rdi
;   movq 0xa8(%rbp), %rsi
;   movq 0xb0(%rbp), %rax
;   movq %rdx, (%rax)
;   movq 0x48(%rsp), %rdx
;   movq %rdx, 8(%rax)
;   movq 0x50(%rsp), %rdx
;   movq %rdx, 0x10(%rax)
;   movq %r11, 0x18(%rax)
;   movq %r10, 0x20(%rax)
;   movq %r9, 0x28(%rax)
;   movq 0x58(%rsp), %r10
;   movq %r10, 0x30(%rax)
;   movq %r13, 0x38(%rax)
;   movq %r15, 0x40(%rax)
;   movq %r12, 0x48(%rax)
;   movq %r14, 0x50(%rax)
;   movq %rbx, 0x58(%rax)
;   movq 0x60(%rsp), %rdx
;   movq %rdx, 0x60(%rax)
;   movq %rcx, 0x68(%rax)
;   movq %r8, 0x70(%rax)
;   movq %rdi, 0x78(%rax)
;   movq %rsi, 0x80(%rax)
;   movq (%rsp), %rax
;   movq 8(%rsp), %rcx
;   movq 0x10(%rsp), %rdx
;   movq 0x18(%rsp), %rsi
;   movq 0x20(%rsp), %rdi
;   movq 0x28(%rsp), %r8
;   movq 0x30(%rsp), %r9
;   movq 0x38(%rsp), %r10
;   movq 0x40(%rsp), %r11
;   movq 0x70(%rsp), %rbx
;   movq 0x78(%rsp), %r12
;   movq 0x80(%rsp), %r13
;   movq 0x88(%rsp), %r14
;   movq 0x90(%rsp), %r15
;   addq $0xa0, %rsp
;   movq %rbp, %rsp
;   popq %rbp
;   retq $0xb0

function %tail_caller_stack_args_and_rets() -> i64 tail {
    fn0 = %tail_callee_stack_args_and_rets(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 tail

block0:
    v0 = iconst.i64 10
    v1 = iconst.i64 15
    v2 = iconst.i64 20
    v3 = iconst.i64 25
    v4 = iconst.i64 30
    v5 = iconst.i64 35
    v6 = iconst.i64 40
    v7 = iconst.i64 45
    v8 = iconst.i64 50
    v9 = iconst.i64 55
    v10 = iconst.i64 60
    v11 = iconst.i64 65
    v12 = iconst.i64 70
    v13 = iconst.i64 75
    v14 = iconst.i64 80
    v15 = iconst.i64 85
    v16 = iconst.i64 90
    v17 = iconst.i64 95
    v18 = iconst.i64 100
    v19 = iconst.i64 105
    v20 = iconst.i64 110
    v21 = iconst.i64 115
    v22 = iconst.i64 120
    v23 = iconst.i64 125
    v24 = iconst.i64 130
    v25 = iconst.i64 135
    v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51 = call fn0(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25)
    return v51
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
;   subq    %rsp, $160, %rsp
;   movq    %rbx, 112(%rsp)
;   movq    %r12, 120(%rsp)
;   movq    %r13, 128(%rsp)
;   movq    %r14, 136(%rsp)
;   movq    %r15, 144(%rsp)
; block0:
;   movl    $10, %edi
;   movq    %rdi, rsp(96 + virtual offset)
;   movl    $15, %esi
;   movq    %rsi, rsp(88 + virtual offset)
;   movl    $20, %edx
;   movq    %rdx, rsp(80 + virtual offset)
;   movl    $25, %ecx
;   movq    %rcx, rsp(72 + virtual offset)
;   movl    $30, %r8d
;   movq    %r8, rsp(64 + virtual offset)
;   movl    $35, %r9d
;   movq    %r9, rsp(56 + virtual offset)
;   movl    $40, %esi
;   movq    %rsi, rsp(48 + virtual offset)
;   movl    $45, %eax
;   movl    $50, %r10d
;   movl    $55, %r14d
;   movl    $60, %r15d
;   movl    $65, %ebx
;   movl    $70, %r12d
;   movl    $75, %r13d
;   movl    $80, %edi
;   movl    $85, %esi
;   movl    $90, %edx
;   movl    $95, %ecx
;   movl    $100, %r8d
;   movl    $105, %r9d
;   movl    $110, %r11d
;   movq    %r11, rsp(40 + virtual offset)
;   movl    $115, %r11d
;   movq    %r11, rsp(32 + virtual offset)
;   movl    $120, %r11d
;   movq    %r11, rsp(24 + virtual offset)
;   movl    $125, %r11d
;   movq    %r11, rsp(16 + virtual offset)
;   movl    $130, %r11d
;   movq    %r11, rsp(8 + virtual offset)
;   movl    $135, %r11d
;   movq    %r11, rsp(0 + virtual offset)
;   subq    %rsp, $320, %rsp
;   virtual_sp_offset_adjust 320
;   movq    rsp(48 + virtual offset), %r11
;   movq    %r11, 0(%rsp)
;   movq    %rax, 8(%rsp)
;   movq    %r10, 16(%rsp)
;   movq    %r14, 24(%rsp)
;   movq    %r15, 32(%rsp)
;   movq    %rbx, 40(%rsp)
;   movq    %r12, 48(%rsp)
;   movq    %r13, 56(%rsp)
;   movq    %rdi, 64(%rsp)
;   movq    %rsi, 72(%rsp)
;   movq    %rdx, 80(%rsp)
;   movq    %rcx, 88(%rsp)
;   movq    %r8, 96(%rsp)
;   movq    %r9, 104(%rsp)
;   movq    rsp(40 + virtual offset), %r11
;   movq    %r11, 112(%rsp)
;   movq    rsp(32 + virtual offset), %r11
;   movq    %r11, 120(%rsp)
;   movq    rsp(24 + virtual offset), %r11
;   movq    %r11, 128(%rsp)
;   movq    rsp(16 + virtual offset), %r11
;   movq    %r11, 136(%rsp)
;   movq    rsp(8 + virtual offset), %r11
;   movq    %r11, 144(%rsp)
;   movq    rsp(0 + virtual offset), %r11
;   movq    %r11, 152(%rsp)
;   lea     176(%rsp), %rax
;   movq    %rax, 160(%rsp)
;   load_ext_name %tail_callee_stack_args_and_rets+0, %r10
;   movq    rsp(72 + virtual offset), %rcx
;   movq    rsp(80 + virtual offset), %rdx
;   movq    rsp(88 + virtual offset), %rsi
;   movq    rsp(96 + virtual offset), %rdi
;   movq    rsp(64 + virtual offset), %r8
;   movq    rsp(56 + virtual offset), %r9
;   call    *%r10
;   movq    0(%rsp), %r10
;   movq    8(%rsp), %rsi
;   movq    16(%rsp), %rax
;   movq    24(%rsp), %rdx
;   movq    32(%rsp), %r9
;   movq    40(%rsp), %r11
;   movq    48(%rsp), %rdi
;   movq    56(%rsp), %rcx
;   movq    64(%rsp), %r8
;   movq    72(%rsp), %r10
;   movq    80(%rsp), %rsi
;   movq    88(%rsp), %rax
;   movq    96(%rsp), %rdx
;   movq    104(%rsp), %r9
;   movq    112(%rsp), %r11
;   movq    120(%rsp), %rdi
;   movq    128(%rsp), %rax
;   addq    %rsp, $144, %rsp
;   virtual_sp_offset_adjust -144
;   movq    112(%rsp), %rbx
;   movq    120(%rsp), %r12
;   movq    128(%rsp), %r13
;   movq    136(%rsp), %r14
;   movq    144(%rsp), %r15
;   addq    %rsp, $160, %rsp
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
;   subq $0xa0, %rsp
;   movq %rbx, 0x70(%rsp)
;   movq %r12, 0x78(%rsp)
;   movq %r13, 0x80(%rsp)
;   movq %r14, 0x88(%rsp)
;   movq %r15, 0x90(%rsp)
; block1: ; offset 0x2d
;   movl $0xa, %edi
;   movq %rdi, 0x60(%rsp)
;   movl $0xf, %esi
;   movq %rsi, 0x58(%rsp)
;   movl $0x14, %edx
;   movq %rdx, 0x50(%rsp)
;   movl $0x19, %ecx
;   movq %rcx, 0x48(%rsp)
;   movl $0x1e, %r8d
;   movq %r8, 0x40(%rsp)
;   movl $0x23, %r9d
;   movq %r9, 0x38(%rsp)
;   movl $0x28, %esi
;   movq %rsi, 0x30(%rsp)
;   movl $0x2d, %eax
;   movl $0x32, %r10d
;   movl $0x37, %r14d
;   movl $0x3c, %r15d
;   movl $0x41, %ebx
;   movl $0x46, %r12d
;   movl $0x4b, %r13d
;   movl $0x50, %edi
;   movl $0x55, %esi
;   movl $0x5a, %edx
;   movl $0x5f, %ecx
;   movl $0x64, %r8d
;   movl $0x69, %r9d
;   movl $0x6e, %r11d
;   movq %r11, 0x28(%rsp)
;   movl $0x73, %r11d
;   movq %r11, 0x20(%rsp)
;   movl $0x78, %r11d
;   movq %r11, 0x18(%rsp)
;   movl $0x7d, %r11d
;   movq %r11, 0x10(%rsp)
;   movl $0x82, %r11d
;   movq %r11, 8(%rsp)
;   movl $0x87, %r11d
;   movq %r11, (%rsp)
;   subq $0x140, %rsp
;   movq 0x170(%rsp), %r11
;   movq %r11, (%rsp)
;   movq %rax, 8(%rsp)
;   movq %r10, 0x10(%rsp)
;   movq %r14, 0x18(%rsp)
;   movq %r15, 0x20(%rsp)
;   movq %rbx, 0x28(%rsp)
;   movq %r12, 0x30(%rsp)
;   movq %r13, 0x38(%rsp)
;   movq %rdi, 0x40(%rsp)
;   movq %rsi, 0x48(%rsp)
;   movq %rdx, 0x50(%rsp)
;   movq %rcx, 0x58(%rsp)
;   movq %r8, 0x60(%rsp)
;   movq %r9, 0x68(%rsp)
;   movq 0x168(%rsp), %r11
;   movq %r11, 0x70(%rsp)
;   movq 0x160(%rsp), %r11
;   movq %r11, 0x78(%rsp)
;   movq 0x158(%rsp), %r11
;   movq %r11, 0x80(%rsp)
;   movq 0x150(%rsp), %r11
;   movq %r11, 0x88(%rsp)
;   movq 0x148(%rsp), %r11
;   movq %r11, 0x90(%rsp)
;   movq 0x140(%rsp), %r11
;   movq %r11, 0x98(%rsp)
;   leaq 0xb0(%rsp), %rax
;   movq %rax, 0xa0(%rsp)
;   movabsq $0, %r10 ; reloc_external Abs8 %tail_callee_stack_args_and_rets 0
;   movq 0x188(%rsp), %rcx
;   movq 0x190(%rsp), %rdx
;   movq 0x198(%rsp), %rsi
;   movq 0x1a0(%rsp), %rdi
;   movq 0x180(%rsp), %r8
;   movq 0x178(%rsp), %r9
;   callq *%r10
;   movq (%rsp), %r10
;   movq 8(%rsp), %rsi
;   movq 0x10(%rsp), %rax
;   movq 0x18(%rsp), %rdx
;   movq 0x20(%rsp), %r9
;   movq 0x28(%rsp), %r11
;   movq 0x30(%rsp), %rdi
;   movq 0x38(%rsp), %rcx
;   movq 0x40(%rsp), %r8
;   movq 0x48(%rsp), %r10
;   movq 0x50(%rsp), %rsi
;   movq 0x58(%rsp), %rax
;   movq 0x60(%rsp), %rdx
;   movq 0x68(%rsp), %r9
;   movq 0x70(%rsp), %r11
;   movq 0x78(%rsp), %rdi
;   movq 0x80(%rsp), %rax
;   addq $0x90, %rsp
;   movq 0x70(%rsp), %rbx
;   movq 0x78(%rsp), %r12
;   movq 0x80(%rsp), %r13
;   movq 0x88(%rsp), %r14
;   movq 0x90(%rsp), %r15
;   addq $0xa0, %rsp
;   movq %rbp, %rsp
;   popq %rbp
;   retq

